// Prisma schema for shared DB (NextAuth + app)
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // SyncUp relations
  courses       UserCourse[]
  events        Event[]
  friendships   Friendship[] @relation("UserFriends")
  friendOf      Friendship[] @relation("FriendOfUser")
  groupEvents   GroupEventParticipant[]
  assessments   Assessment[]
  preferences   OptimizerPreference?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Example {
  id    Int    @id @default(autoincrement())
  name  String
  value Int
}

// ============================================
// SyncUp Models
// ============================================

model Course {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  term        String?
  createdAt   DateTime @default(now())
  
  users       UserCourse[]
  events      Event[]
  assessments Assessment[]
}

model UserCourse {
  userId    String
  courseId  String
  section   String?
  createdAt DateTime @default(now())
  
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@id([userId, courseId])
}

model Event {
  id             String    @id @default(cuid())
  userId         String
  type           EventType
  title          String
  description    String?
  courseId       String?
  startTime      DateTime
  endTime        DateTime
  location       String?
  isRecurring    Boolean   @default(false)
  recurrenceRule String?
  createdBy      String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course?   @relation(fields: [courseId], references: [id], onDelete: SetNull)
  
  @@index([userId, startTime, endTime])
}

enum EventType {
  CLASS
  CUSTOM
  ASSESSMENT
  STUDY
  SOCIAL
}

model Friendship {
  userId    String
  friendId  String
  status    FriendshipStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend    User @relation("FriendOfUser", fields: [friendId], references: [id], onDelete: Cascade)
  
  @@id([userId, friendId])
  @@index([userId, status])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

model GroupEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdBy   String
  startTime   DateTime
  endTime     DateTime
  location    String?
  createdAt   DateTime @default(now())
  
  participants GroupEventParticipant[]
}

model GroupEventParticipant {
  groupEventId String
  userId       String
  status       ParticipantStatus @default(INVITED)
  
  groupEvent   GroupEvent @relation(fields: [groupEventId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@id([groupEventId, userId])
  @@index([userId])
}

enum ParticipantStatus {
  INVITED
  ACCEPTED
  DECLINED
}

model Assessment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  title       String
  description String?
  dueDate     DateTime
  weight      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@index([userId, dueDate])
}

model OptimizerPreference {
  userId              String   @id
  sleepStart          String   // Time in HH:MM format
  sleepEnd            String   // Time in HH:MM format
  preferredStudyTimes Json     // Array of time blocks
  socialGoals         Json     // Social preferences
  uocLoad             Int      // Units of Credit
  updatedAt           DateTime @updatedAt
  
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AvailabilityBlock {
  id        String   @id @default(cuid())
  userId    String
  startTime DateTime
  endTime   DateTime
  date      DateTime
  isFree    Boolean  @default(true)
  createdAt DateTime @default(now())
  
  @@index([userId, date, isFree])
}
